generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/data.db"
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  passwordHash String
  passwordSalt String
  sessions     Session[]
}

model Session {
  token     String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

enum SubmissionState {
  Queued
  InReview
  Correct
  Incorrect
}

enum SubmissionStateReason {
  BuildError
  TimeLimitExceeded
  IncorrectOverriddenAsCorrect
  SandboxError
}

model Submission {
  id                  Int                    @id @default(autoincrement())
  createdAt           DateTime               @default(now())
  gradedAt            DateTime?
  state               SubmissionState
  stateReason         SubmissionStateReason?
  stateReasonDetails  String?
  actualOutput        String?
  testCaseResults     String?
  exitCode            Int?
  runtimeMilliseconds Int?
  commitHash          String
  diff                String?
  message             String?
  team                Team                   @relation(fields: [teamId], references: [id])
  teamId              Int
  problem             Problem                @relation(fields: [problemId], references: [id])
  problemId           Int
  contestId           Int
  contest             Contest                @relation(fields: [contestId], references: [id])
  sourceFiles         SubmissionSourceFile[] @relation()
}

model SubmissionSourceFile {
  id                  Int        @id @default(autoincrement())
  submissionId        Int
  submission          Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  pathFromProblemRoot String
  content             String
}

model Problem {
  id           Int          @id @default(autoincrement())
  friendlyName String       @unique
  pascalName   String       @unique
  sampleInput  String
  sampleOutput String
  realInput    String
  realOutput   String
  inputSpec    String?
  submissions  Submission[]
  contests     Contest[]    @relation("ProblemContestRelation")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  submissions Submission[]
  contests    Contest[]    @relation("TeamContestRelation")
  password    String
  activeTeam  ActiveTeam?
  language    Language
}

enum Language {
  Java
  CSharp
  CPP
  Python
}

model ActiveTeam {
  id               Int       @id @default(autoincrement())
  teamId           Int       @unique
  team             Team      @relation(fields: [teamId], references: [id])
  sessionToken     String?   @unique
  sessionCreatedAt DateTime?
  contestId        Int
  contest          Contest   @relation(fields: [contestId], references: [id])
}

model Contest {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  teams       Team[]       @relation("TeamContestRelation")
  problems    Problem[]    @relation("ProblemContestRelation")
  activeTeams ActiveTeam[]
  submissions Submission[]
  startTime   DateTime?
  freezeTime  DateTime?
}
